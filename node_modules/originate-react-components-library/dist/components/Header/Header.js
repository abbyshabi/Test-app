function _templateObject3() {
  var data = _taggedTemplateLiteral(["\n  align-items: center;\n  background: ", ";\n  padding: ", " 0;\n  position: relative;\n  z-index: 1;\n\n  @include phone {\n    padding: ", " 0;\n\n    .button {\n      margin: ", " 0;\n      padding: ", " ", ";\n    }\n  }\n\n  a {\n    float: left;\n    min-width: ", ";\n\n    img {\n      float: left;\n      height: 40px;\n    }\n  }\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  var data = _taggedTemplateLiteral(["\n  float: right;\n  overflow: auto;\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  float: left;\n  overflow: auto;\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React, { Fragment } from 'react';
import styled from 'styled-components';
import PropTypes from 'prop-types';
import { BrowserRouter, Link } from 'react-router-dom';
import { rem } from 'polished';
import { Button, Container, ThemeProvider } from '..';

var Header = function Header(_ref) {
  var authentication = _ref.authentication,
      logoUrl = _ref.logoUrl,
      clientName = _ref.clientName,
      logout = _ref.logout;
  return React.createElement(ThemeProvider, null, React.createElement(BrowserRouter, null, React.createElement(StyledHeader, null, React.createElement(Container, null, authentication.hasApiKey && !authentication.isTempApiKey ? React.createElement(Fragment, null, React.createElement(HeaderLeft, null, React.createElement(Link, {
    to: "/dashboard"
  }, React.createElement("img", {
    src: logoUrl,
    alt: clientName
  }))), React.createElement(HeaderRight, null, React.createElement(Button, {
    onClick: logout
  }, "Logout"))) : React.createElement(Fragment, null, React.createElement(HeaderLeft, null, React.createElement(Link, {
    to: "/"
  }, React.createElement("img", {
    src: logoUrl,
    alt: clientName
  }))), authentication.hasApiKey ? React.createElement(HeaderRight, null, React.createElement(Button, {
    onClick: logout
  }, "Logout")) : React.createElement(HeaderRight, null, React.createElement(Link, {
    to: "/sign-in",
    className: "button right"
  }, "Sign In")))))));
};

var HeaderLeft = styled.section(_templateObject());
var HeaderRight = styled.section(_templateObject2());
var StyledHeader = styled.header(_templateObject3(), function (_ref2) {
  var theme = _ref2.theme;
  return theme.__OriginateLib.colors.white;
}, rem('15px'), rem('10px'), rem('2.5px'), rem('7.5px'), rem('15px'), rem('150px'));
Header.defaultProps = {
  authentication: {
    hasApiKey: false,
    isTempApiKey: false
  }
};
Header.propTypes = {
  authentication: PropTypes.object,
  logoUrl: PropTypes.string.isRequired,
  clientName: PropTypes.string.isRequired,
  logout: PropTypes.func.isRequired
};
export default Header;