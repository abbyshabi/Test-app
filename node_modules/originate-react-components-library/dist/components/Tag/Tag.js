function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  background: ", ";\n  border-radius: ", ";\n  color: ", ";\n  display: inline-block;\n  font-size: ", ";\n  line-height: ", ";\n  padding: 0 ", ";\n  max-width: 100%;\n  text-align: center;\n  text-transform: capitalize;\n\n  &.paid,\n  &.green,\n  &.success,\n  &.approved,\n  &.disbursed,\n  &.confirmed,\n  &.successful {\n    background: ", ";\n  }\n\n  &.red,\n  &.denied,\n  &.failed,\n  &.failure,\n  &.declined,\n  &.unresolved,\n  &.unconfirmed {\n    background: ", ";\n  }\n\n  &.yellow,\n  &.pending,\n  &.on-hold,\n  &.waiting,\n  &.review,\n  &.in-progress {\n    background: ", ";\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { rem } from 'polished';

var Tag = function Tag(_ref) {
  var children = _ref.children,
      className = _ref.className,
      status = _ref.status;
  return React.createElement(StyledTag, {
    className: " ".concat(status == null ? '' : status)
  }, status);
};

Tag.propTypes = {
  status: PropTypes.string
};
var StyledTag = styled.span(_templateObject(), function (_ref2) {
  var theme = _ref2.theme;
  return theme.__OriginateLib.colors.text;
}, rem('4px'), function (_ref3) {
  var theme = _ref3.theme;
  return theme.__OriginateLib.colors.white;
}, rem('12px'), rem('24px'), rem('15px'), function (_ref4) {
  var theme = _ref4.theme;
  return theme.__OriginateLib.colors.green;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__OriginateLib.colors.red;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__OriginateLib.colors.yellow;
});
export { Tag };