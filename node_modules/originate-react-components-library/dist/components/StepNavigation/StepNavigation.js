function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

import React, { Fragment, Component } from 'react';
import PropTypes from 'prop-types';
import { WithWizard } from 'react-albus';
import { Button } from '../index';

var Navigation =
/*#__PURE__*/
function (_Component) {
  _inherits(Navigation, _Component);

  function Navigation(props) {
    var _this;

    _classCallCheck(this, Navigation);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(Navigation).call(this, props));
    _this.handleStepEvent = props.handleStepEvent.bind(_assertThisInitialized(_this));
    _this.handlePreviousStep = props.handlePreviousStep.bind(_assertThisInitialized(_this));
    _this.backButtonEvent = _this.backButtonEvent.bind(_assertThisInitialized(_this));
    _this.nextButtonEvent = _this.nextButtonEvent.bind(_assertThisInitialized(_this));
    _this.state = {
      loading: false
    };
    return _this;
  }

  _createClass(Navigation, [{
    key: "backButtonEvent",
    value: function backButtonEvent(push) {
      this.setState({
        loading: true
      });
      this.handlePreviousStep(push);
      this.setState({
        loading: false
      });
    }
  }, {
    key: "nextButtonEvent",
    value: function nextButtonEvent(step, push) {
      this.setState({
        loading: true
      });
      this.handleStepEvent(step, push);
      this.setState({
        loading: false
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var loading = this.state.loading;
      return React.createElement(WithWizard, {
        render: function render(_ref) {
          var previous = _ref.previous,
              step = _ref.step,
              steps = _ref.steps,
              push = _ref.push;
          return React.createElement(Fragment, null, React.createElement("div", {
            className: "button-prev-next"
          }, step.id !== 'failureStep' && step.id !== 'failureByAgeStep' && step.id !== 'loanPendingStep' && step.id !== 'loanConfirmationStep' && React.createElement(Button, {
            classes: "block next",
            click_event: function click_event() {
              _this2.nextButtonEvent(step, push);
            },
            disabled: loading
          }, _this2.props.payStackStep ? 'Add Card' : 'Next'), steps.indexOf(step) > 0 && step.id !== 'failureStep' && step.id !== 'failureByAgeStep' && step.id !== 'successStep' && step.id !== 'loanPendingStep' && step.id !== 'loanConfirmationStep' && React.createElement(Button, {
            classes: "block previous",
            click_event: function click_event() {
              _this2.backButtonEvent(push);
            },
            disabled: loading
          }, "Previous")));
        }
      });
    }
  }]);

  return Navigation;
}(Component);

Navigation.defaultProps = {
  handleStepEvent: function handleStepEvent() {},
  handlePreviousStep: function handlePreviousStep() {},
  payStackStep: false
};
Navigation.propTypes = {
  handleStepEvent: PropTypes.func,
  handlePreviousStep: PropTypes.func,
  payStackStep: PropTypes.bool
};
export { Navigation };