function _templateObject() {
  var data = _taggedTemplateLiteral(["\n  cursor: pointer;\n  display: inline-block;\n  margin: 0 10px 20px;\n\n  input {\n    margin: 0;\n    opacity: 0;\n    position: absolute;\n    width: 0;\n    height: 0;\n    cursor: pointer;\n\n    &:checked + span {\n      background: ", ";\n      border-color: ", ";\n      color: ", ";\n\n      &:before {\n        border-color: ", ";\n        background: ", ";\n      }\n\n      &:after {\n        border-color: ", ";\n      }\n    }\n  }\n\n  span {\n    border: 1px solid ", ";\n    border-radius: 3px;\n    display: block;\n    font-weight: ", ";\n    float: left;\n    line-height: ", ";\n    margin: 0;\n    outline: none;\n    padding: ", " ", " ", " ", ";\n    position: relative;\n    transition: all 0.2s ease-in;\n    width: 100%;\n\n    &:before {\n      border: 1px solid\n        ", ";\n      border-radius: 100%;\n      box-sizing: border-box;\n      content: '';\n      left: ", ";\n      top: ", ";\n      height: 20px;\n      position: absolute;\n      width: 20px;\n    }\n\n    &:after {\n      border-left: 2px solid transparent;\n      border-bottom: 2px solid transparent;\n      content: '';\n      height: 3px;\n      left: ", ";\n      position: absolute;\n      top: ", ";\n      transform: rotate(-45deg);\n      width: 8px;\n    }\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { rgba, rem } from 'polished';

var CheckBox = function CheckBox(_ref) {
  var className = _ref.className,
      value = _ref.value,
      disabled = _ref.disabled,
      checked = _ref.checked,
      readOnly = _ref.readOnly,
      name = _ref.name,
      placeholder = _ref.placeholder,
      onChange = _ref.onChange,
      label = _ref.label;
  return React.createElement(StyledCheckbox, {
    className: 'checkbox'
  }, React.createElement("input", {
    className: "".concat(className == null ? '' : className),
    type: "checkbox",
    value: value,
    disabled: disabled,
    checked: checked,
    readOnly: readOnly,
    name: name,
    placeholder: placeholder,
    onChange: onChange
  }), React.createElement("span", {
    className: "checkbox__label"
  }, label));
};

var StyledCheckbox = styled.label(_templateObject(), function (_ref2) {
  var theme = _ref2.theme;
  return theme.__OriginateLib.colors.white;
}, function (_ref3) {
  var theme = _ref3.theme;
  return theme.__OriginateLib.colors.primary;
}, function (_ref4) {
  var theme = _ref4.theme;
  return theme.__OriginateLib.colors.primary;
}, function (_ref5) {
  var theme = _ref5.theme;
  return theme.__OriginateLib.colors.primary;
}, function (_ref6) {
  var theme = _ref6.theme;
  return theme.__OriginateLib.colors.primary;
}, function (_ref7) {
  var theme = _ref7.theme;
  return theme.__OriginateLib.colors.white;
}, function (_ref8) {
  var theme = _ref8.theme;
  return theme.__OriginateLib.colors.grey;
}, function (_ref9) {
  var theme = _ref9.theme;
  return theme.__OriginateLib.fontWeight.semiBold;
}, rem('20px'), rem('10px'), rem('10px'), rem('10px'), rem('40px'), function (_ref10) {
  var theme = _ref10.theme;
  return rgba(theme.__OriginateLib.colors.text, 0.3);
}, rem('10px'), rem('10px'), rem('15px'), rem('17px'));
CheckBox.propTypes = {
  name: PropTypes.string,
  label: PropTypes.string,
  value: PropTypes.string,
  onChange: PropTypes.func,
  className: PropTypes.string,
  placeholder: PropTypes.string,
  disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  checked: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  readOnly: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])
};
export default CheckBox;