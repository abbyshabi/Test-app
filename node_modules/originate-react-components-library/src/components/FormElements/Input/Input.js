import React from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';
import styled from 'styled-components';
import { rgba, rem } from 'polished';
import img from '../../../static/icons/error.svg';
import NumberFormat from 'react-number-format';

const Input = ({
  amountField,
  phoneField,
  className,
  label,
  type,
  linkText,
  linkReference,
  icon,
  info,
  errorMessage,
  autoComplete,
  autoFocus,
  defaultValue,
  disabled,
  minlength,
  maxlength,
  name,
  onBlur,
  onKeyDown,
  onKeyUp,
  onKeyPress,
  onChange,
  placeholder,
  readOnly,
  value,
  classes,
  min,
  max,
  ...restProps
}) => {
  return (
    <StyledInput>
      <label
        className={`input__group ${
          amountField || phoneField ? 'has-append' : ''
        }`}
      >
        {label == null ? '' : <span className={'input__label'}>{label}</span>}
        {linkText == null ? (
          ''
        ) : (
          <div className={'input__link'}>
            <Link to={`${linkReference}`} tabIndex="-1">
              {linkText}
            </Link>
          </div>
        )}

        <div className="input-holder">
          {amountField && <span className="append">NGN</span>}
          {phoneField && <span className="append">+234</span>}

          {amountField ? (
            <NumberFormat
              thousandSeparator={true}
              type="tel"
              autoComplete={autoComplete}
              autoFocus={autoFocus}
              className={`input ${className == null ? '' : className}`}
              defaultValue={defaultValue}
              disabled={disabled ? 'disabled' : ''}
              min={min}
              max={max}
              minLength={minlength}
              maxLength={maxlength}
              name={name}
              onBlur={onBlur}
              onKeyUp={onKeyUp}
              onKeyDown={onKeyDown}
              onKeyPress={onKeyPress}
              onChange={onChange}
              placeholder={placeholder}
              readOnly={readOnly}
              value={value}
            />
          ) : (
            <input
              autoComplete={autoComplete}
              autoFocus={autoFocus}
              className={`input ${className == null ? '' : className}`}
              defaultValue={defaultValue}
              disabled={disabled ? 'disabled' : ''}
              min={min}
              max={max}
              minLength={minlength}
              maxLength={maxlength}
              name={name}
              onBlur={onBlur}
              onKeyUp={onKeyUp}
              onKeyDown={onKeyDown}
              onKeyPress={onKeyPress}
              onChange={onChange}
              placeholder={placeholder}
              readOnly={readOnly}
              type={type == null ? 'text' : type}
              value={value}
            />
          )}
        </div>
        {errorMessage && <span className={'input__error'}>{errorMessage}</span>}
      </label>
    </StyledInput>
  );
};

Input.defaultProps = {
  type: 'text',
  unauthenticated: '',
  icon: '',
  info: ''
};

Input.propTypes = {
  label: PropTypes.string,
  className: PropTypes.string,
  info: PropTypes.string,
  type: PropTypes.string,
  unauthenticated: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  icon: PropTypes.string
};

const StyledInput = styled.div`
  input {
    background: ${({ theme }) => theme.__OriginateLib.colors.white} center right
      ${rem('16px')} no-repeat;
    border: 1px solid ${({ theme }) => theme.__OriginateLib.colors.text};
    border-radius: ${rem('4px')};
    box-shadow: none;
    box-sizing: border-box;
    display: block;
    line-height: ${rem('20px')};
    margin: 0 auto;
    outline: none;
    padding: ${rem('10px')} ${rem('16px')};
    transition: 0.3s;
    width: 100%;

    @include placeholder-style(
      ${({ theme }) => theme.__OriginateLib.colors.text}
    );
  }

  .input {
    background: ${({ theme }) => theme.__OriginateLib.colors.white} center right
      ${rem('16px')} no-repeat;
    border: 1px solid ${({ theme }) => theme.__OriginateLib.colors.text};
    border-radius: ${rem('4px')};
    box-shadow: none;
    box-sizing: border-box;
    color: ${({ theme }) => theme.__OriginateLib.colors.text};
    display: block;
    line-height: ${rem('20px')};
    margin: 0 auto;
    outline: none;
    padding: ${rem('10px')} ${rem('16px')};
    transition: 0.3s;
    width: 100%;

    @include placeholder-style(
      ${({ theme }) => theme.__OriginateLib.colors.text}
    );

    &-holder {
      display: flex;
      margin-bottom: ${rem('5px')};
      width: 100%;
    }

    &.border-bottom {
      border-radius: 0;
      border-width: 0 0 1px 0;
      background: ${({ theme }) => theme.__OriginateLib.colors.white} center
        right 0 no-repeat;
      line-height: ${rem('20px')};
      padding: ${rem('10px')} 0;
    }

    &.margin-bottom {
      margin: 0 0 ${rem('30px')};
    }

    &.error {
      background-image: url(${img});
      border-color: ${({ theme }) => theme.__OriginateLib.colors.systemFail};
    }

    &__error {
      color: ${({ theme }) => theme.__OriginateLib.colors.systemFail};
      display: block;
      font-size: ${rem('11px')};
      margin: 0;

      &:empty {
        display: none;
      }
    }

    &__help-text {
      display: block;
      font-size: ${rem('11px')};
      margin: 0;

      &:empty {
        display: none;
      }
    }

    &__label {
      color: ${({ theme }) => theme.__OriginateLib.colors.text2};
      cursor: pointer;
      display: inline-block;
      float: left;
      font-size: ${rem('11px')};
      font-weight: ${({ theme }) => theme.__OriginateLib.fontWeight.semiBold};
      line-height: ${rem('16px')};
      overflow: hidden;
      margin: 0 0 ${rem('8px')};
      text-transform: uppercase;
    }

    &__group {
      display: block;
      margin: 0 0 ${rem('20px')};

      &.has-append {
        position: relative;

        .append {
          background: ${({ theme }) =>
            rgba(theme.__OriginateLib.colors.secondary, 0.1)};
          border-radius: ${rem('4px')};
          color: ${({ theme }) => theme.__OriginateLib.colors.text3};
          font-weight: ${({ theme }) =>
            theme.__OriginateLib.fontWeight.semiBold};
          left: 0;
          line-height: ${rem('32px')};
          margin: ${rem('4px')} 0;
          padding: 0 ${rem('10px')};
          position: absolute;
        }

        input {
          padding-left: ${rem('60px')};
        }
      }
    }

    &__more-info {
      display: block;
      font-size: ${rem('12px')};
      line-height: ${rem('16px')};
      margin-top: ${rem('8px')};
    }

    &__link {
      float: right;
      font-size: ${rem('12px')};
      line-height: ${rem('16px')};

      a {
        display: block;
        outline: none;
        text-decoration: underline;

        &:hover {
          text-decoration: underline;
        }
      }
    }
  }

  $track-color: #f2f8ff !default;
  $thumb-color: ${({ theme }) => theme.__OriginateLib.colors.primary} !default;

  $thumb-radius: 12px !default;
  $thumb-height: 24px !default;
  $thumb-width: 24px !default;
  $thumb-shadow-size: 4px !default;
  $thumb-shadow-blur: 4px !default;
  $thumb-shadow-color: ${({ theme }) => rgba(0, 0, 0, 0.2)} !default;
  $thumb-border-width: 1px !default;
  $thumb-border-color: #eceff1 !default;

  $track-width: 100% !default;
  $track-height: 10px !default;
  $track-shadow-size: 1px !default;
  $track-shadow-blur: 1px !default;
  $track-shadow-color: ${({ theme }) => rgba(0, 0, 0, 0.2)} !default;
  $track-border-width: 0px !default;
  $track-border-color: #cfd8dc !default;

  $track-radius: 5px !default;
  $contrast: 5% !default;

  $ie-bottom-track-color: darken($track-color, $contrast) !default;

  @mixin shadow($shadow-size, $shadow-blur, $shadow-color) {
    box-shadow: $shadow-size $shadow-size $shadow-blur $shadow-color,
      0 0 $shadow-size lighten($shadow-color, 5%);
  }

  @mixin track {
    cursor: pointer;
    height: $track-height;
    transition: all 0.2s ease;
    width: $track-width;
  }

  @mixin thumb($adjustment: 0) {
    @include shadow(
      $thumb-shadow-size,
      $thumb-shadow-blur,
      $thumb-shadow-color
    );
    background: $thumb-color;
    border: $thumb-border-width solid $thumb-border-color;
    border-radius: $thumb-radius;
    cursor: pointer;
    height: $thumb-height + $adjustment;
    width: $thumb-width + $adjustment;
  }

  @mixin disabled {
    cursor: not-allowed;
  }

  [type='range'] {
    -webkit-appearance: none;
    background: transparent;
    border: none;
    margin: $thumb-height / 2 0;
    width: $track-width;

    &::-moz-focus-outer {
      border: 0;
    }

    /*&:focus {
		outline: 0;

		&::-webkit-slider-runnable-track {
			background: lighten($track-color, $contrast);
		}

		&::-ms-fill-lower {
			background: $track-color;
		}

		&::-ms-fill-upper {
			background: lighten($track-color, $contrast);
		}
	}*/

    &::-webkit-slider-runnable-track {
      @include track;
      @include shadow(
        $track-shadow-size,
        $track-shadow-blur,
        $track-shadow-color
      );
      background: $track-color;
      border: $track-border-width solid $track-border-color;
      border-radius: $track-radius;
    }

    &::-webkit-slider-thumb {
      @include thumb;
      -webkit-appearance: none;
      margin-top: (
        (-$track-border-width * 2 + $track-height) / 2 - $thumb-height / 2
      );
    }

    &::-moz-range-track {
      @include shadow(
        $track-shadow-size,
        $track-shadow-blur,
        $track-shadow-color
      );
      @include track;
      background: $track-color;
      border: $track-border-width solid $track-border-color;
      border-radius: $track-radius;
      height: $track-height / 2;
    }

    &::-moz-range-thumb {
      @include thumb(-4);
    }

    &::-ms-track {
      @include track;
      background: transparent;
      border-color: transparent;
      border-width: ($thumb-height / 2) 0;
      color: transparent;
    }

    &::-ms-fill-lower {
      @include shadow(
        $track-shadow-size,
        $track-shadow-blur,
        $track-shadow-color
      );
      background: $ie-bottom-track-color;
      border: $track-border-width solid $track-border-color;
      border-radius: ($track-radius * 2);
    }

    &::-ms-fill-upper {
      @include shadow(
        $track-shadow-size,
        $track-shadow-blur,
        $track-shadow-color
      );
      background: $track-color;
      border: $track-border-width solid $track-border-color;
      border-radius: ($track-radius * 2);
    }

    &::-ms-thumb {
      @include thumb(-4);
      margin-top: $track-height / 4;
    }

    &:disabled {
      &::-webkit-slider-thumb {
        @include disabled;
      }

      &::-moz-range-thumb {
        @include disabled;
      }

      &::-ms-thumb {
        @include disabled;
      }

      &::-webkit-slider-runnable-track {
        @include disabled;
      }

      &::-ms-fill-lower {
        @include disabled;
      }

      &::-ms-fill-upper {
        @include disabled;
      }
    }
  }
`;

export default Input;
