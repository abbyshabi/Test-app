import React from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import { rem } from 'polished';
import img from '../../../static/icons/error.svg';

const TextArea = ({
  className,
  autoComplete,
  autoFocus,
  cols,
  rows,
  value,
  disabled,
  readOnly,
  name,
  placeholder,
  onChange,
  onBlur,
  errorMessage,
  label
}) => {
  return (
    <StyledTextArea>
      <label className={'textarea__group'}>
        {label == null ? (
          ''
        ) : (
          <span className={'textarea__label'}>{label}</span>
        )}

        <textarea
          autoComplete={autoComplete}
          autoFocus={autoFocus}
          className={`textarea ${className == null ? '' : className}`}
          cols={cols}
          rows={rows}
          value={value}
          disabled={disabled}
          readOnly={readOnly}
          onChange={onChange}
          name={name}
          placeholder={placeholder}
          onBlur={onBlur}
        />
        {errorMessage && (
          <span className={'textarea__error'}>{errorMessage}</span>
        )}
      </label>
    </StyledTextArea>
  );
};

const StyledTextArea = styled.div`
  textarea {
    background: ${({ theme }) => theme.__OriginateLib.colors.white} no-repeat
      top 10px right 10px;
    border: 1px solid ${({ theme }) => theme.__OriginateLib.colors.text};
    border-radius: ${rem('4px')};
    box-shadow: none;
    box-sizing: border-box;
    display: block;
    height: auto;
    line-height: ${rem('24px')};
    margin: 0 auto;
    outline: none;
    padding: ${rem('12px')} ${rem('16px')};
    resize: none;
    width: 100%;

    @include placeholder-style(
      ${({ theme }) => theme.__OriginateLib.colors.text}
    );
  }

  .textarea {
    background: ${({ theme }) => theme.__OriginateLib.colors.white} no-repeat
      top 10px right 10px;
    border: 1px solid ${({ theme }) => theme.__OriginateLib.colors.text};
    border-radius: ${rem('4px')};
    box-shadow: none;
    box-sizing: border-box;
    display: block;
    height: auto;
    line-height: ${rem('24px')};
    margin: 0 auto;
    outline: none;
    padding: ${rem('12px')} ${rem('16px')};
    resize: none;
    width: 100%;

    &.border-bottom {
      border-radius: 0;
      border-width: 0 0 1px 0;
      line-height: ${rem('20px')};
      padding: 0 0 ${rem('15px')};
    }

    &.error {
      background-image: url(${img});
      border-color: ${({ theme }) => theme.__OriginateLib.colors.systemFail};
    }

    &__error {
      color: ${({ theme }) => theme.__OriginateLib.colors.systemFail};
      display: block;
      font-size: ${rem('11px')};
      margin: 0;

      &:empty {
        display: none;
      }
    }

    &__label {
      display: block;
      font-size: ${rem('14px')};
      font-weight: ${({ theme }) => theme.__OriginateLib.fontWeight.semiBold};
      line-height: ${rem('16px')};
      margin: 0 0 ${rem('8px')};
    }

    &__group {
      display: block;
      margin: 0 0 ${rem('20px')};
    }

    &__more-info {
      display: block;
      font-size: ${rem('12px')};
      line-height: ${rem('16px')};
      margin-top: ${rem('8px')};
    }
  }
`;
TextArea.propTypes = {
  cols: PropTypes.string,
  rows: PropTypes.string,
  name: PropTypes.string,
  type: PropTypes.string,
  label: PropTypes.string,
  value: PropTypes.string,
  onBlur: PropTypes.func,
  onChange: PropTypes.func,
  className: PropTypes.string,

  errorMessage: PropTypes.string,

  autoComplete: PropTypes.string,
  autoFocus: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  disabled: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),
  readOnly: PropTypes.oneOfType([PropTypes.bool, PropTypes.string])
};

export default TextArea;
