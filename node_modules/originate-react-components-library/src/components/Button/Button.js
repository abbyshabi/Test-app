import React from 'react';
import classnames from 'classnames';
import styled, { keyframes } from 'styled-components';
import { rem } from 'polished';
import PropTypes from 'prop-types';

const Button = ({
  children,
  className,
  button_text,
  name,
  buttonId,
  value,
  disabled,
  click_event,
  type,
  style
}) => (
  <StyledButton
    name={name}
    id={buttonId}
    value={value}
    className={classnames(`${className}`)}
    disabled={disabled === true ? 'disabled' : ''}
    onClick={click_event}
    type={type ? type : 'button'}
    style={style}
  >
    <ButtonText>{children || button_text}</ButtonText>
  </StyledButton>
);

const spin = keyframes`
	to {
      transform: rotate(1turn);
    }
`;
const ButtonText = styled.span`
  display: inline-block;
  transition: 0.3s;
`;

const StyledButton = styled.button`
  border: none;
  background-color: ${({ theme }) => theme.__OriginateLib.colors.secondary};
  border-radius: ${rem('4px')};
  box-shadow: none;
  color: ${({ theme }) => theme.__OriginateLib.colors.white};
  cursor: pointer;
  display: inline-block;
  font-size: ${rem('16px')};
  font-weight: ${({ theme }) => theme.__OriginateLib.fontWeight.semiBold};
  line-height: ${rem('20px')};
  outline: none;
  overflow: hidden;
  padding: ${rem('10px')} ${rem('32px')};
  position: relative;
  text-align: center;
  transition: 0.3s;

  &:after {
    border: 2px solid transparent;
    border-radius: 50%;
    border-right-color: ${({ theme }) => theme.__OriginateLib.colors.white};
    box-sizing: border-box;
    content: '';
    display: inline-block;
    float: right;
    left: 0;
    right: 0;
    margin: 0 auto;
    height: ${rem('20px')};
    position: absolute;
    visibility: hidden;
    width: ${rem('20px')};
  }

  &:active,
  &:focus,
  &:hover {
    color: ${({ theme }) => theme.__OriginateLib.colors.white};
  }

  &:disabled {
    background: rgba(${({ theme }) => theme.__OriginateLib.colors.white}, 0.65);
    cursor: not-allowed;
  }

  &.small {
    font-size: ${rem('14px')};
    padding: ${rem('5px')} ${rem('15px')};
  }

  &.secondary {
    background-color: ${({ theme }) => theme.__OriginateLib.colors.white};
    color: ${({ theme }) => theme.__OriginateLib.colors.primary};

    &:after {
      border-right-color: ${({ theme }) => theme.__OriginateLib.colors.primary};
    }

    .icon {
      svg {
        fill: ${({ theme }) => theme.__OriginateLib.colors.primary};
      }
    }

    &:active,
    &:hover {
    }

    &:disabled {
      color: rgba(${({ theme }) => theme.__OriginateLib.colors.primary}, 0.65);

      .icon {
        svg {
          fill: ${({ theme }) => theme.__OriginateLib.colors.disabled};
        }
      }
    }
  }

  &.link {
    padding: 0;
    margin: ${rem('10px')} ${rem('32px')};
  }

  &.previous {
    background-color: ${({ theme }) => theme.__OriginateLib.colors.white};
    border: 1px solid ${({ theme }) => theme.__OriginateLib.colors.primary};
    color: ${({ theme }) => theme.__OriginateLib.colors.primary};
  }

  &.next {
    border: 1px solid ${({ theme }) => theme.__OriginateLib.colors.button};
  }

  &.facebook {
    background: ${({ theme }) => theme.__OriginateLib.colors.facebookBlue};
    border-color: ${({ theme }) => theme.__OriginateLib.colors.facebookBlue};

    .icon {
      float: left;

      svg {
        display: block;
      }
    }
  }

  .icon {
    svg {
      fill: ${({ theme }) => theme.__OriginateLib.colors.white};
    }
  }

  &.icon-left {
    .icon {
      margin-right: ${rem('12px')};
    }
  }

  &.icon-right {
    .icon {
      float: right;
      margin-left: ${rem('12px')};
    }
  }

  &.right {
    float: right;
  }

  &.block {
    display: block;
    width: 100%;
  }

  &.center {
    display: block;
    margin: 0 auto;
  }

  &.center-inline {
    display: inline-block;
    margin: 0 auto;
  }

  &.loading {
    ${ButtonText} {
      opacity: 0;
    }

    &:after {
      animation: ${spin} 0.6s linear infinite;
      visibility: visible;
    }
  }

  &-list {
    button {
      margin-right: ${rem('20px')};
    }
  }

  &-prev-next {
    margin: ${rem('30px')} 0 0;
    overflow: hidden;
    text-align: center;

    .button {
      margin: 0 auto ${rem('15px')};

      &:last-of-type {
        margin: 0 auto;
      }
    }
  }
`;

Button.propTypes = {
  name: PropTypes.string,
  id: PropTypes.string,
  value: PropTypes.string,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  type: PropTypes.string,
  onClick: PropTypes.func,
  style: PropTypes.object
};
Button.defaultProps = {
  name: '',
  id: '',
  value: '',
  className: '',
  disabled: '',
  type: '',
  onClick: '',
  style: {}
};
export default Button;
