import React, { Fragment, Component } from 'react';
import PropTypes from 'prop-types';
import { WithWizard } from 'react-albus';
import { Button } from '../index';

class Navigation extends Component {
  constructor(props) {
    super(props);
    this.handleStepEvent = props.handleStepEvent.bind(this);
    this.handlePreviousStep = props.handlePreviousStep.bind(this);
    this.backButtonEvent = this.backButtonEvent.bind(this);
    this.nextButtonEvent = this.nextButtonEvent.bind(this);
    this.state = {
      loading: false
    };
  }

  backButtonEvent(push) {
    this.setState({ loading: true });
    this.handlePreviousStep(push);
    this.setState({ loading: false });
  }

  nextButtonEvent(step, push) {
    this.setState({ loading: true });
    this.handleStepEvent(step, push);
    this.setState({ loading: false });
  }

  render() {
    const { loading } = this.state;

    return (
      <WithWizard
        render={({ previous, step, steps, push }) => (
          <Fragment>
            <div className="button-prev-next">
              {step.id !== 'failureStep' &&
                step.id !== 'failureByAgeStep' &&
                step.id !== 'loanPendingStep' &&
                step.id !== 'loanConfirmationStep' && (
                  <Button
                    classes="block next"
                    click_event={() => {
                      this.nextButtonEvent(step, push);
                    }}
                    disabled={loading}
                  >
                    {this.props.payStackStep ? 'Add Card' : 'Next'}
                  </Button>
                )}

              {steps.indexOf(step) > 0 &&
                step.id !== 'failureStep' &&
                step.id !== 'failureByAgeStep' &&
                step.id !== 'successStep' &&
                step.id !== 'loanPendingStep' &&
                step.id !== 'loanConfirmationStep' && (
                  <Button
                    classes="block previous"
                    click_event={() => {
                      this.backButtonEvent(push);
                    }}
                    disabled={loading}
                  >
                    Previous
                  </Button>
                )}
            </div>
          </Fragment>
        )}
      />
    );
  }
}

Navigation.defaultProps = {
  handleStepEvent: () => {},
  handlePreviousStep: () => {},
  payStackStep: false
};

Navigation.propTypes = {
  handleStepEvent: PropTypes.func,
  handlePreviousStep: PropTypes.func,
  payStackStep: PropTypes.bool
};

export { Navigation };
