{"version":3,"file":"index.js","sources":["../../src/index.js"],"sourcesContent":["/**\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This script exports a HOC that accepts a routes array of objects\n * and an options object.\n *\n * API:\n *\n * withBreadcrumbs(\n *   routes?: Array<Route>,\n *   options? Object<Options>,\n * ): HigherOrderComponent\n *\n * More Info:\n *\n * https://github.com/icd2k3/react-router-breadcrumbs-hoc\n *\n */\n\nimport React, { createElement } from 'react';\nimport { matchPath, withRouter } from 'react-router';\n\nconst DEFAULT_MATCH_OPTIONS = { exact: true };\nconst NO_BREADCRUMB = 'NO_BREADCRUMB';\n\n/**\n * This method was \"borrowed\" from https://stackoverflow.com/a/28339742\n * we used to use the humanize-string package, but it added a lot of bundle\n * size and issues with compilation. This 4-liner seems to cover most cases.\n */\nconst humanize = (str) => str\n  .replace(/^[\\s_]+|[\\s_]+$/g, '')\n  .replace(/[_\\s]+/g, ' ')\n  .replace(/^[a-z]/, (m) => m.toUpperCase());\n\n/**\n * Renders and returns the breadcrumb complete\n * with `match`, `location`, and `key` props.\n */\nconst render = ({\n  component: reactRouterConfigComponent,\n  breadcrumb: Breadcrumb,\n  match,\n  location,\n  ...rest\n}) => {\n  const componentProps = { match, location, key: match.url, ...rest };\n\n  return {\n    ...componentProps,\n    breadcrumb: typeof Breadcrumb === 'string'\n      ? createElement('span', { key: componentProps.key }, Breadcrumb)\n      : <Breadcrumb {...componentProps} />,\n  };\n};\n\n/**\n * Small helper method to get a default breadcrumb if the user hasn't provided one.\n*/\nconst getDefaultBreadcrumb = ({ pathSection, currentSection, location }) => {\n  const match = matchPath(pathSection, { ...DEFAULT_MATCH_OPTIONS, path: pathSection });\n\n  return render({\n    breadcrumb: humanize(currentSection),\n    match,\n    location,\n  });\n};\n\n/**\n * Loops through the route array (if provided) and returns either a\n * user-provided breadcrumb OR a sensible default (if enabled)\n*/\nconst getBreadcrumbMatch = ({\n  currentSection,\n  disableDefaults,\n  excludePaths,\n  location,\n  pathSection,\n  routes,\n}) => {\n  let breadcrumb;\n\n  // Check the optional `exludePaths` option in `options` to see if the\n  // current path should not include a breadcrumb.\n  const getIsPathExcluded = (path) => matchPath(pathSection, { path, exact: true, strict: false });\n  if (excludePaths && excludePaths.some(getIsPathExcluded)) {\n    return NO_BREADCRUMB;\n  }\n\n  // Loop through the route array and see if the user has provided a custom breadcrumb.\n  routes.some(({ breadcrumb: userProvidedBreadcrumb, matchOptions, path, ...rest }) => {\n    if (!path) {\n      throw new Error('withBreadcrumbs: `path` must be provided in every route object');\n    }\n\n    const match = matchPath(pathSection, { ...(matchOptions || DEFAULT_MATCH_OPTIONS), path });\n\n    // If user passed breadcrumb: null OR custom match options to suppress a breadcrumb\n    // we need to know NOT to add it to the matches array\n    // see: `if (breadcrumb !== NO_BREADCRUMB)` below.\n    if ((match && userProvidedBreadcrumb === null) || (!match && matchOptions)) {\n      breadcrumb = NO_BREADCRUMB;\n      return true;\n    }\n\n    if (match) {\n      // This covers the case where a user may be extending their react-router route\n      // config with breadcrumbs, but also does not want default breadcrumbs to be\n      // automatically generated (opt-in).\n      if (!userProvidedBreadcrumb && disableDefaults) {\n        breadcrumb = NO_BREADCRUMB;\n        return true;\n      }\n\n      breadcrumb = render({\n        // Although we have a match, the user may be passing their react-router config object\n        // which we support. The route config object may not have a `breadcrumb` param specified.\n        // If this is the case, we should provide a default via `humanize`.\n        breadcrumb: userProvidedBreadcrumb || humanize(currentSection),\n        match,\n        location,\n        ...rest,\n      });\n      return true;\n    }\n    return false;\n  });\n\n  // User provided a breadcrumb prop, or we generated one above.\n  if (breadcrumb) {\n    return breadcrumb;\n  }\n\n  // If there was no breadcrumb provided and user has disableDefaults turned on.\n  if (disableDefaults) {\n    return NO_BREADCRUMB;\n  }\n\n  // If the above conditionals don't fire, generate a default breadcrumb based on the path.\n  return getDefaultBreadcrumb({\n    pathSection,\n    // include a \"Home\" breadcrumb by default (can be overrode or disabled in config).\n    currentSection: pathSection === '/' ? 'Home' : currentSection,\n    location,\n  });\n};\n\n/**\n * Splits the pathname into sections, then search for matches in the routes\n * a user-provided breadcrumb OR a sensible default.\n*/\nexport const getBreadcrumbs = ({ routes, location, options = {} }) => {\n  const matches = [];\n  const { pathname } = location;\n\n  pathname\n    .split('?')[0]\n    // Remove trailing slash \"/\" from pathname.\n    .replace(/\\/$/, '')\n    // Split pathname into sections.\n    .split('/')\n    // Reduce over the sections and call `getBreadcrumbMatch()` for each section.\n    .reduce((previousSection, currentSection) => {\n      // Combine the last route section with the currentSection.\n      // For example, `pathname = /1/2/3` results in match checks for\n      // `/1`, `/1/2`, `/1/2/3`.\n      const pathSection = !currentSection ? '/' : `${previousSection}/${currentSection}`;\n\n      const breadcrumb = getBreadcrumbMatch({\n        currentSection,\n        location,\n        pathSection,\n        routes,\n        ...options,\n      });\n\n      // Add the breadcrumb to the matches array\n      // unless the user has explicitly passed.\n      // { path: x, breadcrumb: null } to disable.\n      if (breadcrumb !== NO_BREADCRUMB) {\n        matches.push(breadcrumb);\n      }\n\n      return pathSection === '/' ? '' : pathSection;\n    }, null);\n\n  return matches;\n};\n\n/**\n * Takes a route array and recursively flattens it IF there are\n * nested routes in the config.\n*/\nconst flattenRoutes = (routes) => (routes || []).reduce((arr, route) => {\n  if (route.routes) {\n    return arr.concat([route, ...flattenRoutes(route.routes)]);\n  }\n  return arr.concat(route);\n}, []);\n\nexport default (routes = [], options) => (Component) => withRouter(\n  (props) => createElement(Component, {\n    ...props,\n    breadcrumbs: getBreadcrumbs({\n      routes: flattenRoutes(routes),\n      location: props.location,\n      options,\n    }),\n  }),\n);\n"],"names":["DEFAULT_MATCH_OPTIONS","exact","NO_BREADCRUMB","humanize","str","replace","m","toUpperCase","render","component","Breadcrumb","breadcrumb","match","location","rest","componentProps","key","url","createElement","React","getDefaultBreadcrumb","pathSection","currentSection","matchPath","path","getBreadcrumbMatch","disableDefaults","excludePaths","routes","some","strict","userProvidedBreadcrumb","matchOptions","Error","getBreadcrumbs","options","matches","pathname","split","reduce","previousSection","push","flattenRoutes","arr","route","concat","Component","withRouter","props","breadcrumbs"],"mappings":"g3DAuBA,IAAMA,sBAAwB,CAAEC,OAAO,GACjCC,cAAgB,gBAOhBC,SAAW,SAACC,UAAQA,EACvBC,QAAQ,mBAAoB,IAC5BA,QAAQ,UAAW,KACnBA,QAAQ,SAAU,SAACC,UAAMA,EAAEC,iBAMxBC,OAAS,cACbC,cACYC,IAAZC,WACAC,IAAAA,MACAC,IAAAA,SACGC,4EAEGC,kBAAmBH,MAAAA,EAAOC,SAAAA,EAAUG,IAAKJ,EAAMK,KAAQH,4BAGxDC,GACHJ,WAAkC,iBAAfD,EACfQ,oBAAc,OAAQ,CAAEF,IAAKD,EAAeC,KAAON,GACnDS,6BAACT,EAAeK,MAOlBK,qBAAuB,gBAAGC,IAAAA,YAAaC,IAAAA,eAAgBT,IAAAA,SACrDD,EAAQW,sBAAUF,oBAAkBrB,uBAAuBwB,KAAMH,YAEhEb,OAAO,CACZG,WAAYR,SAASmB,GACrBV,MAAAA,EACAC,SAAAA,KAQEY,mBAAqB,gBAQrBd,EAPJW,IAAAA,eACAI,IAAAA,gBACAC,IAAAA,aACAd,IAAAA,SACAQ,IAAAA,YACAO,IAAAA,cAOID,GAAgBA,EAAaE,KADP,SAACL,UAASD,sBAAUF,EAAa,CAAEG,KAAAA,EAAMvB,OAAO,EAAM6B,QAAQ,MAE/E5B,eAIT0B,EAAOC,KAAK,gBAAeE,IAAZpB,WAAoCqB,IAAAA,aAAcR,IAAAA,KAASV,uEACnEU,QACG,IAAIS,MAAM,sEAGZrB,EAAQW,sBAAUF,oBAAmBW,GAAgBhC,uBAAwBwB,KAAAA,YAK9EZ,GAAoC,OAA3BmB,IAAsCnB,GAASoB,GAC3DrB,EAAaT,eACN,KAGLU,IAKAD,GADGoB,GAA0BL,EAChBxB,cAIFM,uBAIXG,WAAYoB,GAA0B5B,SAASmB,GAC/CV,MAAAA,EACAC,SAAAA,GACGC,KAVI,KAkBTH,IAKAe,EACKxB,cAIFkB,qBAAqB,CAC1BC,YAAAA,EAEAC,eAAgC,MAAhBD,EAAsB,OAASC,EAC/CT,SAAAA,OAQSqB,eAAiB,gBAAGN,IAAAA,OAAQf,IAAAA,aAAUsB,QAAAA,aAAU,KACrDC,EAAU,UACKvB,EAAbwB,SAGLC,MAAM,KAAK,GAEXjC,QAAQ,MAAO,IAEfiC,MAAM,KAENC,OAAO,SAACC,EAAiBlB,OAIlBD,EAAeC,YAA0BkB,cAAmBlB,GAA5B,IAEhCX,EAAac,mCACjBH,eAAAA,EACAT,SAAAA,EACAQ,YAAAA,EACAO,OAAAA,GACGO,WAMDxB,IAAeT,eACjBkC,EAAQK,KAAK9B,GAGQ,MAAhBU,EAAsB,GAAKA,GACjC,MAEEe,GAOHM,cAAgB,SAAhBA,EAAiBd,UAAYA,GAAU,IAAIW,OAAO,SAACI,EAAKC,UACxDA,EAAMhB,OACDe,EAAIE,QAAQD,6BAAUF,EAAcE,EAAMhB,WAE5Ce,EAAIE,OAAOD,IACjB,0BAEahB,yDAAS,GAAIO,gDAAY,SAACW,UAAcC,uBACtD,SAACC,UAAU9B,oBAAc4B,oBACpBE,GACHC,YAAaf,eAAe,CAC1BN,OAAQc,cAAcd,GACtBf,SAAUmC,EAAMnC,SAChBsB,QAAAA"}