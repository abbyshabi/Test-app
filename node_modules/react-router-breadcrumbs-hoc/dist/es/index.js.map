{"version":3,"file":"index.js","sources":["../../src/index.js"],"sourcesContent":["/**\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * This script exports a HOC that accepts a routes array of objects\n * and an options object.\n *\n * API:\n *\n * withBreadcrumbs(\n *   routes?: Array<Route>,\n *   options? Object<Options>,\n * ): HigherOrderComponent\n *\n * More Info:\n *\n * https://github.com/icd2k3/react-router-breadcrumbs-hoc\n *\n */\n\nimport React, { createElement } from 'react';\nimport { matchPath, withRouter } from 'react-router';\n\nconst DEFAULT_MATCH_OPTIONS = { exact: true };\nconst NO_BREADCRUMB = 'NO_BREADCRUMB';\n\n/**\n * This method was \"borrowed\" from https://stackoverflow.com/a/28339742\n * we used to use the humanize-string package, but it added a lot of bundle\n * size and issues with compilation. This 4-liner seems to cover most cases.\n */\nconst humanize = (str) => str\n  .replace(/^[\\s_]+|[\\s_]+$/g, '')\n  .replace(/[_\\s]+/g, ' ')\n  .replace(/^[a-z]/, (m) => m.toUpperCase());\n\n/**\n * Renders and returns the breadcrumb complete\n * with `match`, `location`, and `key` props.\n */\nconst render = ({\n  component: reactRouterConfigComponent,\n  breadcrumb: Breadcrumb,\n  match,\n  location,\n  ...rest\n}) => {\n  const componentProps = { match, location, key: match.url, ...rest };\n\n  return {\n    ...componentProps,\n    breadcrumb: typeof Breadcrumb === 'string'\n      ? createElement('span', { key: componentProps.key }, Breadcrumb)\n      : <Breadcrumb {...componentProps} />,\n  };\n};\n\n/**\n * Small helper method to get a default breadcrumb if the user hasn't provided one.\n*/\nconst getDefaultBreadcrumb = ({ pathSection, currentSection, location }) => {\n  const match = matchPath(pathSection, { ...DEFAULT_MATCH_OPTIONS, path: pathSection });\n\n  return render({\n    breadcrumb: humanize(currentSection),\n    match,\n    location,\n  });\n};\n\n/**\n * Loops through the route array (if provided) and returns either a\n * user-provided breadcrumb OR a sensible default (if enabled)\n*/\nconst getBreadcrumbMatch = ({\n  currentSection,\n  disableDefaults,\n  excludePaths,\n  location,\n  pathSection,\n  routes,\n}) => {\n  let breadcrumb;\n\n  // Check the optional `exludePaths` option in `options` to see if the\n  // current path should not include a breadcrumb.\n  const getIsPathExcluded = (path) => matchPath(pathSection, { path, exact: true, strict: false });\n  if (excludePaths && excludePaths.some(getIsPathExcluded)) {\n    return NO_BREADCRUMB;\n  }\n\n  // Loop through the route array and see if the user has provided a custom breadcrumb.\n  routes.some(({ breadcrumb: userProvidedBreadcrumb, matchOptions, path, ...rest }) => {\n    if (!path) {\n      throw new Error('withBreadcrumbs: `path` must be provided in every route object');\n    }\n\n    const match = matchPath(pathSection, { ...(matchOptions || DEFAULT_MATCH_OPTIONS), path });\n\n    // If user passed breadcrumb: null OR custom match options to suppress a breadcrumb\n    // we need to know NOT to add it to the matches array\n    // see: `if (breadcrumb !== NO_BREADCRUMB)` below.\n    if ((match && userProvidedBreadcrumb === null) || (!match && matchOptions)) {\n      breadcrumb = NO_BREADCRUMB;\n      return true;\n    }\n\n    if (match) {\n      // This covers the case where a user may be extending their react-router route\n      // config with breadcrumbs, but also does not want default breadcrumbs to be\n      // automatically generated (opt-in).\n      if (!userProvidedBreadcrumb && disableDefaults) {\n        breadcrumb = NO_BREADCRUMB;\n        return true;\n      }\n\n      breadcrumb = render({\n        // Although we have a match, the user may be passing their react-router config object\n        // which we support. The route config object may not have a `breadcrumb` param specified.\n        // If this is the case, we should provide a default via `humanize`.\n        breadcrumb: userProvidedBreadcrumb || humanize(currentSection),\n        match,\n        location,\n        ...rest,\n      });\n      return true;\n    }\n    return false;\n  });\n\n  // User provided a breadcrumb prop, or we generated one above.\n  if (breadcrumb) {\n    return breadcrumb;\n  }\n\n  // If there was no breadcrumb provided and user has disableDefaults turned on.\n  if (disableDefaults) {\n    return NO_BREADCRUMB;\n  }\n\n  // If the above conditionals don't fire, generate a default breadcrumb based on the path.\n  return getDefaultBreadcrumb({\n    pathSection,\n    // include a \"Home\" breadcrumb by default (can be overrode or disabled in config).\n    currentSection: pathSection === '/' ? 'Home' : currentSection,\n    location,\n  });\n};\n\n/**\n * Splits the pathname into sections, then search for matches in the routes\n * a user-provided breadcrumb OR a sensible default.\n*/\nexport const getBreadcrumbs = ({ routes, location, options = {} }) => {\n  const matches = [];\n  const { pathname } = location;\n\n  pathname\n    .split('?')[0]\n    // Remove trailing slash \"/\" from pathname.\n    .replace(/\\/$/, '')\n    // Split pathname into sections.\n    .split('/')\n    // Reduce over the sections and call `getBreadcrumbMatch()` for each section.\n    .reduce((previousSection, currentSection) => {\n      // Combine the last route section with the currentSection.\n      // For example, `pathname = /1/2/3` results in match checks for\n      // `/1`, `/1/2`, `/1/2/3`.\n      const pathSection = !currentSection ? '/' : `${previousSection}/${currentSection}`;\n\n      const breadcrumb = getBreadcrumbMatch({\n        currentSection,\n        location,\n        pathSection,\n        routes,\n        ...options,\n      });\n\n      // Add the breadcrumb to the matches array\n      // unless the user has explicitly passed.\n      // { path: x, breadcrumb: null } to disable.\n      if (breadcrumb !== NO_BREADCRUMB) {\n        matches.push(breadcrumb);\n      }\n\n      return pathSection === '/' ? '' : pathSection;\n    }, null);\n\n  return matches;\n};\n\n/**\n * Takes a route array and recursively flattens it IF there are\n * nested routes in the config.\n*/\nconst flattenRoutes = (routes) => (routes || []).reduce((arr, route) => {\n  if (route.routes) {\n    return arr.concat([route, ...flattenRoutes(route.routes)]);\n  }\n  return arr.concat(route);\n}, []);\n\nexport default (routes = [], options) => (Component) => withRouter(\n  (props) => createElement(Component, {\n    ...props,\n    breadcrumbs: getBreadcrumbs({\n      routes: flattenRoutes(routes),\n      location: props.location,\n      options,\n    }),\n  }),\n);\n"],"names":["DEFAULT_MATCH_OPTIONS","exact","NO_BREADCRUMB","humanize","str","replace","m","toUpperCase","render","reactRouterConfigComponent","component","Breadcrumb","breadcrumb","match","location","rest","componentProps","key","url","createElement","getDefaultBreadcrumb","pathSection","currentSection","matchPath","path","getBreadcrumbMatch","disableDefaults","excludePaths","routes","getIsPathExcluded","strict","some","userProvidedBreadcrumb","matchOptions","Error","getBreadcrumbs","options","matches","pathname","split","reduce","previousSection","push","flattenRoutes","arr","route","concat","Component","withRouter","props","breadcrumbs"],"mappings":"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"}